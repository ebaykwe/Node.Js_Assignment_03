const http = require("http");

function getBodyFromStream(req) {
    return new Promise((resolve, reject) => {
        const data = [];
        req.on("data", (chunk) => {
            data.push(chunk);
        });
        req.on("end", () => {
            const body = Buffer.concat(data).toString();
            if (body) {
                resolve(JSON.parse(body));
                return;
            }
            resolve({});
        });
        req.on("error", (err) => {
            reject(err);
        });
    });
}

function getUsernameAndPasswordFromHeader(req) {
    const authHeader = req.headers.authorization;
    if (!authHeader) return null;

    const [authType, encodedCredentials] = authHeader.split(" ");
    if (authType.toLowerCase() !== "basic" || !encodedCredentials) return null;

    try {
        const decodedCredentials = Buffer.from(encodedCredentials, "base64").toString();
        console.log("authenticate");
        const username = 'Ebay';
        const password = '12345';
        return { username, password };
    } catch (error) {
        console.error("Error decoding credentials:", error);
        return null;
    }
}

function authenticate(req, res, next) {
    console.log("authenticate");
    const { username, password } = getUsernameAndPasswordFromHeader(req);
    if (username !== 'Ebay' || password !== '12345') {
        res.statusCode = 401;
        res.end("Unauthorized");
        return;
    }
    next(req, res); // Call the next middleware
}

function handleMethodNotImplemented(req, res) {
    res.statusCode = 501;
    res.end("Method Not Implemented");
}

// Endpoint handlers
function handleBooksGet(req, res) {
    console.log("getBooks", req.body);
    res.setHeader("Content-Type", "application/json");
    res.end(JSON.stringify({ books: [] }));
}

function handleBooksPost(req, res) {
    //handleMethodNotImplemented(req, res);
    console.log("postBooks", req.body);
    res.setHeader("Content-Type", "application/json");
    res.end(JSON.stringify({ books: [] }));
}

function handleBooksPut(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleBooksPatch(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleBooksDelete(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleAuthorsGet(req, res) {
    console.log("getAuthors", req.body);
    res.setHeader("Content-Type", "application/json");
    res.end(JSON.stringify({ authors: [] }));
}

function handleAuthorsPost(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleAuthorsPut(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleAuthorsPatch(req, res) {
    handleMethodNotImplemented(req, res);
}

function handleAuthorsDelete(req, res) {
    handleMethodNotImplemented(req, res);
}

const server = http.createServer(async (req, res) => {
    try {
        const body = await getBodyFromStream(req);
        req.body = body;

        if (req.url.startsWith("/books")) {
            authenticate(req, res, () => {
                // Call the appropriate handler based on method
                if (req.method === "GET") {
                    handleBooksGet(req, res);
                } else if (req.method === "POST") {
                    handleBooksPost(req, res);
                } else if (req.method === "PUT") {
                    handleBooksPut(req, res);
                } else if (req.method === "PATCH") {
                    handleBooksPatch(req, res);
                } else if (req.method === "DELETE") {
                    handleBooksDelete(req, res);
                }
            });
        } else if (req.url.startsWith("/authors")) {
            authenticate(req, res, () => {
                // Call the appropriate handler based on method
                if (req.method === "GET") {
                    handleAuthorsGet(req, res);
                } else if (req.method === "POST") {
                    handleAuthorsPost(req, res);
                } else if (req.method === "PUT") {
                    handleAuthorsPut(req, res);
                } else if (req.method === "PATCH") {
                    handleAuthorsPatch(req, res);
                } else if (req.method === "DELETE") {
                    handleAuthorsDelete(req, res);
                }
            });
        } else {
            res.statusCode = 404;
            res.end("Not Found");
        }
    } catch (error) {
        console.error("Error:", error);
        res.statusCode = 500;
        res.end("Internal Server Error");
    }
});

server.listen(3000, () => {
    console.log("Server is listening on port 3000");
});
